tests/run.py typical test results (17.3.20 Python 2.7.13 64bit macOS 10.12.3)

running /Library/Framewo...nts/MacOS/Python tests/testBases.py

    testing module geodesy.bases version 17.03.12
    test 1 lat, lon: 50.06632°N, 005.71475°W
    test 2 lat, lon: 50.066389°N, 005.714722°W
    test 3 equals: True
    test 4 toStr: 51°28′40″N, 000°00′06″W
    test 5 toStr: 51.4778°N, 000.0016°W
    test 6 precision: 0
    test 7 toStr: 51°28′40″N, 000°00′06″W, +42.00m
    all geodesy.bases tests passed (17.3.20 Python 2.7.13 64bit)

running /Library/Framewo...nts/MacOS/Python tests/testDatum.py

    testing module geodesy.datum version 17.03.10
    test 1 ellipsoid: True
    test 2 transform: True
    test 3 datum: True
    test 4 meanR: 6371008.77142
    test 5 WGS84: name='WGS84', a=6378137.0, b=6356752.3142499998, f=0.0033528107, e2=0.00669438, e22=0.0067394967, R=6371008.7714166669, Rm=6367435.6797186071
    test 6 WGS84: A=6367449.1458234154, e=0.0818191908, f=1/298.2572235630, n=0.0016792204(-3.7914875232e-13)
    test 7 WGS84: Alpha6=(0, 8.377318206245e-04, 7.608527773572e-07, 1.197645503329e-09, 2.429170607201e-12, 5.711757677866e-15, 1.491117731258e-17)
    test 8 WGS84: Beta6=(0, 8.377321640579e-04, 5.905870152220e-08, 1.673482665284e-1, 2.164798040063e-13, 3.787978046169e-16, 7.248748890694e-19)
    all geodesy.datum tests passed (17.3.20 Python 2.7.13 64bit)

running /Library/Framewo...nts/MacOS/Python tests/testDms.py

    testing module geodesy.dms version 17.03.20
    test 1 parseDMS: 0.0
    test 2 parseDMS: 0.0
    test 3 parseDMS: 0.0
    test 4 parseDMS: 0.0
    test 5 parseDMS: 0.0
    test 6 parseDMS: 0.0
    test 7 parse3llh: 51.477811, -0.001475, 0.000000
    test 8 toDMS: 45°45′45.36″
    test 9 toDMS: 45.7626°
    test 10 toDMS: 45°45.756′
    test 11 toDMS: 45°45′45.36″
    test 12 toDMS: 45.7626°
    test 13 toDMS: 45°45.7560′
    test 14 toDMS: 45°45′45.36″
    test 15 compassPoint: N
    test 16 compassPoint: N
    test 17 compassPoint: N
    test 18 compassPoint: N
    test 19 compassPoint: NNE
    test 20 compassPoint: N
    test 21 compassPoint: NE
    test 22 compassPoint: NNE
    test 23 compassPoint: SW
    test 24 compassPoint: W
    test 25 compassPoint: SW
    test 26 compassPoint: SW
    test 27 compassPoint: WSW
    test 28 compassPoint: W
    test 29 compassPoint: SW
    test 30 compassPoint: WSW
    all geodesy.dms tests passed (17.3.20 Python 2.7.13 64bit)

running /Library/Framewo...nts/MacOS/Python tests/testEllipsoidal.py

    testing module geodesy.ellipsoidalNvector version 17.03.11
    test 1 lat/lonDMS: 52.20472°N, 000.14056°E
    test 2 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 3 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 4 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 5 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 6 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 7 equals: True
    test 8 equals: False
    test 9 copy: True
    test 10 toLatLon: 44.995674°N, 045.0°E
    test 11 toNvector: (0.50004, 0.50004, 0.70705)
    test 12 equals: False
    test 13 equals: True
    test 14 sumOf: (52.70504, 0.61904, 0.70705)
    test 15 sumOf: Nv
    test 16 copy: True
    test 17 convertDatum: 51.477284°N, 000.00002°E, -45.91m
    test 18 convertDatum: 51.4773°N, 000.0°E, -45.91m
    test 19 toNVector: (0.6228, 0.0, 0.7824, +0.24)
    test 20 toCartesian: [3980581, 97, 4966825]
    test 21 toCartesian: [3194434.411, 3194434.411, 4487326.82]
    test 22 toLatLon: 45.0°N, 045.0°E, +0.00m
    test 23 Nvector: (0.5, 0.5, 0.7071)
    test 24 Nvector: (0.5, 0.5, 0.707, +1.00)
    all geodesy.ellipsoidalNvector tests passed (17.3.20 Python 2.7.13 64bit)

    testing module geodesy.ellipsoidalVincenty version 17.03.20
    test 1 lat/lonDMS: 52.20472°N, 000.14056°E
    test 2 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 3 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 4 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 5 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 6 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 7 equals: True
    test 8 equals: False
    test 9 copy: True
    test 10 distanceTo: 404607.805988
    test 11 distanceTo: 404607.805988
    test 12 distanceTo: 3981601
    test 13 destination: 51.513526°N, 000.098038°W
    test 14 destination: 51°30′49″N, 000°05′53″W
    test 15 destination: 33°57′N, 118°24′W
    test 16 destination: 33.950367°N, 118.399012°W
    test 17 distanceTo (WGS84): 866455.43292
    test 18 VincentyError (WGS84): LatLon(41°29′24.29″N, 071°18′46.07″W) coincident with LatLon(41°29′24.29″N, 071°18′46.07″W)
    test 19 ValueError (WGS84): other Ellipsoid mistmatch: Ellipsoids.Airy1830 vs Ellipsoids.WGS84
    test 20 copy: True
    test 21 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 22 destination (WGS84): 37.6528°S, 143.9265°E
    test 23 destination2 (WGS84): 37.652821°S, 143.926496°E, 307.1736°NW
    test 24 finalBearingOn (WGS84): 307.1736°, 307°10′25.07″NW
    test 25 distanceTo (WGS84): 969954.166
    test 26 distanceTo3 (WGS84): 969954.166314, 9.141877, 11.29722
    test 27 initialBearingTo (WGS84): 9.1419°, 9°08′30.76″N
    test 28 finalBearingTo (WGS84): 11.2972°, 11°17′49.99″NNE
    test 29 distanceTo (WGS84): 404607.806
    test 30 distanceTo3 (WGS84): 404607.805988, 156.11064, 157.8345
    test 31 initialBearingTo (WGS84): 156.1106°, 156°06′38.31″SSE
    test 32 finalBearingTo (WGS84): 157.8345°, 157°50′04.2″SSE
    test 33 distanceTo (WGS84): 54973.295
    test 34 distanceTo3 (WGS84): 54973.29527, 233.13008, 232.82461
    test 35 initialBearingTo (WGS84): 233.1301°, 233°07′48.28″SW
    test 36 finalBearingTo (WGS84): 232.8246°, 232°49′28.59″SW
    test 37 distanceTo (NAD83): 866455.43292
    test 38 VincentyError (NAD83): LatLon(41°29′24.29″N, 071°18′46.07″W) coincident with LatLon(41°29′24.29″N, 071°18′46.07″W)
    test 39 ValueError (NAD83): other Ellipsoid mistmatch: Ellipsoids.Airy1830 vs Ellipsoids.GRS80
    test 40 copy: True
    test 41 copy: 37°57′03.7203″S, 144°25′29.5244″E
    test 42 destination (NAD83): 37.6528°S, 143.9265°E
    test 43 destination2 (NAD83): 37.652821°S, 143.926496°E, 307.1736°NW
    test 44 finalBearingOn (NAD83): 307.1736°, 307°10′25.07″NW
    test 45 distanceTo (NAD83): 969954.166
    test 46 distanceTo3 (NAD83): 969954.166314, 9.141877, 11.29722
    test 47 initialBearingTo (NAD83): 9.1419°, 9°08′30.76″N
    test 48 finalBearingTo (NAD83): 11.2972°, 11°17′49.99″NNE
    test 49 distanceTo (NAD83): 404607.806
    test 50 distanceTo3 (NAD83): 404607.805988, 156.11064, 157.8345
    test 51 initialBearingTo (NAD83): 156.1106°, 156°06′38.31″SSE
    test 52 finalBearingTo (NAD83): 157.8345°, 157°50′04.2″SSE
    test 53 distanceTo (NAD83): 54973.295
    test 54 distanceTo3 (NAD83): 54973.29527, 233.13008, 232.82461
    test 55 initialBearingTo (NAD83): 233.1301°, 233°07′48.28″SW
    test 56 finalBearingTo (NAD83): 232.8246°, 232°49′28.59″SW
    test 57 NOAAexample1: 191872.1190, 249 03 16.4237, 67 59 11.1619
    test 58 NOAAexample2: 182009.1679, 254 42 44.6439, 73 09 21.3315
    test 59 NOAAexample3: 123456.7891, 245 00 34.7001, 64 20 24.6864
    test 60 NOAAexample4: 145239.0603, 114 29 26.9586, 295 21 32.6566
    all geodesy.ellipsoidalVincenty tests passed (17.3.20 Python 2.7.13 64bit)

running /Library/Framewo...nts/MacOS/Python tests/testGreatCircle.py

    testing module geodesy.sphericalNvector version 17.03.13
    test 1 InitialBearingSameLocations: 0.0
    test 2 InitialBearingEqualLocations: 0.0
    test 3 FinalBearingSameLocations: 180.0
    test 4 FinalBearingEqualLocations: 180.0
    test 5 DistanceSameLocations: 0.0
    test 6 DistanceEqualLocations: 0.0
    test 7 DistanceEiffelToVersailles: 14084.3001  FAILED, KNOWN, expected 14084.2807
    test 8 DistanceVersaillesToEiffel: 14084.3001  FAILED, KNOWN, expected 14084.2807
    test 9 InitialBearingEiffelToVersailles: 245.13460297
    test 10 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 11 InitialBearingVersaillesToEiffel: 65.003253951
    test 12 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 13 FinalBearingEiffelToVersailles: 245.00325395
    test 14 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 15 FinalBearingVersaillesToEiffel: 65.134602969
    test 16 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 17 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 18 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 19 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 20 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 21 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.1597433
    test 22 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 23 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 24 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.1597433
    test 25 Intersection: 48.83569095°N, 002.221252031°E
    test 26 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 27 CrossTrackDistance90Degrees200Meters: 200.0
    test 28 CrossTrackDistance270Degrees200Meters: -200.0
    test 29 CrossTrackDistanceThatShouldBeVeryCloseToZero: 0.00000000
    5 geodesy.sphericalNvector tests (17.2%) FAILED, incl. 5 KNOWN (17.3.20 Python 2.7.13 64bit)

    testing module geodesy.sphericalTrigonometry version 17.03.13
    test 1 InitialBearingSameLocations: 0.0
    test 2 InitialBearingEqualLocations: 0.0
    test 3 FinalBearingSameLocations: 180.0
    test 4 FinalBearingEqualLocations: 180.0
    test 5 DistanceSameLocations: 0.0
    test 6 DistanceEqualLocations: 0.0
    test 7 DistanceEiffelToVersailles: 14084.3001  FAILED, KNOWN, expected 14084.2807
    test 8 DistanceVersaillesToEiffel: 14084.3001  FAILED, KNOWN, expected 14084.2807
    test 9 InitialBearingEiffelToVersailles: 245.13460297
    test 10 InitialBearingEiffelToVersailles(DMS): 245°08′04.5707″
    test 11 InitialBearingVersaillesToEiffel: 65.003253951
    test 12 InitialBearingVersaillesToEiffel(DMS): 65°00′11.7142″
    test 13 FinalBearingEiffelToVersailles: 245.00325395
    test 14 FinalBearingEiffelToVersailles(DMS): 245°00′11.7142″
    test 15 FinalBearingVersaillesToEiffel: 65.134602969
    test 16 FinalBearingVersaillesToEiffel(DMS): 65°08′04.5707″
    test 17 GenerateLocationVersailles: 48.804766°N, 002.120339°E
    test 18 GenerateLocationEiffel: 48.858158°N, 002.294825°E
    test 19 MidpointEiffelToVersailles: 48.831495°N, 002.207536°E
    test 20 MidpointEiffelToVersailles(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 21 MidpointEiffelToVersailles(m): 7042.15004788  FAILED, KNOWN, expected 7042.1597433
    test 22 MidpointVersaillesToEiffel: 48.831495°N, 002.207536°E  FAILED, KNOWN, expected 48.831495°N, 002.207535°E
    test 23 MidpointVersaillesToEiffel(DMS): 48°49′53.3817″N, 002°12′27.1279″E
    test 24 MidpointVersaillesToEiffel(m): 7042.15004788  FAILED, KNOWN, expected 7042.1597433
    test 25 Intersection: 48.83569095°N, 002.221252031°E
    test 26 Intersection: 48.8356909498836°N, 002.2212520313074°E
    test 27 CrossTrackDistance90Degrees200Meters: 200.0
    test 28 CrossTrackDistance270Degrees200Meters: -200.0
    test 29 CrossTrackDistanceThatShouldBeVeryCloseToZero: 0.00000000
    5 geodesy.sphericalTrigonometry tests (17.2%) FAILED, incl. 5 KNOWN (17.3.20 Python 2.7.13 64bit)

running /Library/Framewo...nts/MacOS/Python tests/testLcc.py

    testing module geodesy.lcc version 17.03.10
    test 1 lb1: 448251.0 5411932.0001
    test 2 lb1: 448251, 5411932
    test 3 lb1: WRF_Lb.WGS84
    test 4 LatLon: 46.5°N, 003.0°E
    test 5 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 6 toLcc1: 700000 6600000
    test 7 toLcc1: 46.5°N, 003.0°E
    test 8 lb2: 1894411 1564650
    test 9 lb2: Clarke1866
    test 10 toLatLon2: 35.0°N, 075.0°W
    test 11 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 12 toLatLon2: NAD27
    test 13 toLcc2: 1894410.9 1564649.5
    test 14 toLcc2: Snyder.NAD27
    test 15 Be72Lb: 49.833334°N, 003.034153°E
    test 16 Be72Lb: NAD83
    test 17 Be72Lb: 49.833334°N, 004.367487°E
    test 18 Be72Lb: NAD83
    test 19 Be72Lb: 49.833334°N, 005.70082°E
    test 20 Be72Lb: NAD83
    test 21 Be72Lb: 51.166667°N, 003.034153°E
    test 22 Be72Lb: NAD83
    test 23 Be72Lb: 51.166667°N, 004.367487°E
    test 24 Be72Lb: NAD83
    test 25 Be72Lb: 51.166667°N, 005.70082°E
    test 26 Be72Lb: NAD83
    test 27 Fr93Lb: 49.0°N, 002.0°W
    test 28 Fr93Lb: WGS84
    test 29 Fr93Lb: 49.0°N, 003.0°E
    test 30 Fr93Lb: WGS84
    test 31 Fr93Lb: 49.0°N, 008.0°E
    test 32 Fr93Lb: WGS84
    test 33 Fr93Lb: 44.0°N, 002.0°W
    test 34 Fr93Lb: WGS84
    test 35 Fr93Lb: 44.0°N, 003.0°E
    test 36 Fr93Lb: WGS84
    test 37 Fr93Lb: 44.0°N, 008.0°E
    test 38 Fr93Lb: WGS84
    test 39 MaNLb: 31.73°N, 008.54°W
    test 40 MaNLb: NTF
    test 41 MaNLb: 31.73°N, 005.4°W
    test 42 MaNLb: NTF
    test 43 MaNLb: 31.73°N, 002.26°W
    test 44 MaNLb: NTF
    test 45 MaNLb: 34.87°N, 008.54°W
    test 46 MaNLb: NTF
    test 47 MaNLb: 34.87°N, 005.4°W
    test 48 MaNLb: NTF
    test 49 MaNLb: 34.87°N, 002.26°W
    test 50 MaNLb: NTF
    test 51 MxLb: 17.5°N, 114.0°W
    test 52 MxLb: WGS84
    test 53 MxLb: 17.5°N, 102.0°W
    test 54 MxLb: WGS84
    test 55 MxLb: 17.5°N, 090.0°W
    test 56 MxLb: WGS84
    test 57 MxLb: 29.5°N, 114.0°W
    test 58 MxLb: WGS84
    test 59 MxLb: 29.5°N, 102.0°W
    test 60 MxLb: WGS84
    test 61 MxLb: 29.5°N, 090.0°W
    test 62 MxLb: WGS84
    test 63 PyT_Lb: 45.898939°N, 000.540154°E
    test 64 PyT_Lb: NTF
    test 65 PyT_Lb: 45.898939°N, 002.337229°E
    test 66 PyT_Lb: NTF
    test 67 PyT_Lb: 45.898939°N, 004.134305°E
    test 68 PyT_Lb: NTF
    test 69 PyT_Lb: 47.696014°N, 000.540154°E
    test 70 PyT_Lb: NTF
    test 71 PyT_Lb: 47.696014°N, 002.337229°E
    test 72 PyT_Lb: NTF
    test 73 PyT_Lb: 47.696014°N, 004.134305°E
    test 74 PyT_Lb: NTF
    test 75 Snyder: 33.0°N, 108.0°W
    test 76 Snyder: NAD27
    test 77 Snyder: 33.0°N, 096.0°W
    test 78 Snyder: NAD27
    test 79 Snyder: 33.0°N, 084.0°W
    test 80 Snyder: NAD27
    test 81 Snyder: 45.0°N, 108.0°W
    test 82 Snyder: NAD27
    test 83 Snyder: 45.0°N, 096.0°W
    test 84 Snyder: NAD27
    test 85 Snyder: 45.0°N, 084.0°W
    test 86 Snyder: NAD27
    test 87 USA_Lb: 33.0°N, 108.0°W
    test 88 USA_Lb: WGS84
    test 89 USA_Lb: 33.0°N, 096.0°W
    test 90 USA_Lb: WGS84
    test 91 USA_Lb: 33.0°N, 084.0°W
    test 92 USA_Lb: WGS84
    test 93 USA_Lb: 45.0°N, 108.0°W
    test 94 USA_Lb: WGS84
    test 95 USA_Lb: 45.0°N, 096.0°W
    test 96 USA_Lb: WGS84
    test 97 USA_Lb: 45.0°N, 084.0°W
    test 98 USA_Lb: WGS84
    test 99 WRF_Lb: 33.0°N, 109.0°W
    test 100 WRF_Lb: WGS84
    test 101 WRF_Lb: 33.0°N, 097.0°W
    test 102 WRF_Lb: WGS84
    test 103 WRF_Lb: 33.0°N, 085.0°W
    test 104 WRF_Lb: WGS84
    test 105 WRF_Lb: 45.0°N, 109.0°W
    test 106 WRF_Lb: WGS84
    test 107 WRF_Lb: 45.0°N, 097.0°W
    test 108 WRF_Lb: WGS84
    test 109 WRF_Lb: 45.0°N, 085.0°W
    test 110 WRF_Lb: WGS84
    test 111 lb1: 448251.0 5411932.0001
    test 112 lb1: 448251, 5411932
    test 113 lb1: WRF_Lb.WGS84
    test 114 LatLon: 46.5°N, 003.0°E
    test 115 LatLon: 46°30′00.0″N, 003°00′00.0″E
    test 116 toLcc1: 700000 6600000
    test 117 toLcc1: 46.5°N, 003.0°E
    test 118 lb2: 1894411 1564650
    test 119 lb2: Clarke1866
    test 120 toLatLon2: 35.0°N, 075.0°W
    test 121 toLatLon2: 35°00′00.0007″N, 074°59′59.9997″W
    test 122 toLatLon2: NAD27
    test 123 toLcc2: 1894410.9 1564649.5
    test 124 toLcc2: Snyder.NAD27
    test 125 Be72Lb: 49.833334°N, 003.034153°E
    test 126 Be72Lb: NAD83
    test 127 Be72Lb: 49.833334°N, 004.367487°E
    test 128 Be72Lb: NAD83
    test 129 Be72Lb: 49.833334°N, 005.70082°E
    test 130 Be72Lb: NAD83
    test 131 Be72Lb: 51.166667°N, 003.034153°E
    test 132 Be72Lb: NAD83
    test 133 Be72Lb: 51.166667°N, 004.367487°E
    test 134 Be72Lb: NAD83
    test 135 Be72Lb: 51.166667°N, 005.70082°E
    test 136 Be72Lb: NAD83
    test 137 Fr93Lb: 49.0°N, 002.0°W
    test 138 Fr93Lb: WGS84
    test 139 Fr93Lb: 49.0°N, 003.0°E
    test 140 Fr93Lb: WGS84
    test 141 Fr93Lb: 49.0°N, 008.0°E
    test 142 Fr93Lb: WGS84
    test 143 Fr93Lb: 44.0°N, 002.0°W
    test 144 Fr93Lb: WGS84
    test 145 Fr93Lb: 44.0°N, 003.0°E
    test 146 Fr93Lb: WGS84
    test 147 Fr93Lb: 44.0°N, 008.0°E
    test 148 Fr93Lb: WGS84
    test 149 MaNLb: 31.73°N, 008.54°W
    test 150 MaNLb: NTF
    test 151 MaNLb: 31.73°N, 005.4°W
    test 152 MaNLb: NTF
    test 153 MaNLb: 31.73°N, 002.26°W
    test 154 MaNLb: NTF
    test 155 MaNLb: 34.87°N, 008.54°W
    test 156 MaNLb: NTF
    test 157 MaNLb: 34.87°N, 005.4°W
    test 158 MaNLb: NTF
    test 159 MaNLb: 34.87°N, 002.26°W
    test 160 MaNLb: NTF
    test 161 MxLb: 17.5°N, 114.0°W
    test 162 MxLb: WGS84
    test 163 MxLb: 17.5°N, 102.0°W
    test 164 MxLb: WGS84
    test 165 MxLb: 17.5°N, 090.0°W
    test 166 MxLb: WGS84
    test 167 MxLb: 29.5°N, 114.0°W
    test 168 MxLb: WGS84
    test 169 MxLb: 29.5°N, 102.0°W
    test 170 MxLb: WGS84
    test 171 MxLb: 29.5°N, 090.0°W
    test 172 MxLb: WGS84
    test 173 PyT_Lb: 45.898939°N, 000.540154°E
    test 174 PyT_Lb: NTF
    test 175 PyT_Lb: 45.898939°N, 002.337229°E
    test 176 PyT_Lb: NTF
    test 177 PyT_Lb: 45.898939°N, 004.134305°E
    test 178 PyT_Lb: NTF
    test 179 PyT_Lb: 47.696014°N, 000.540154°E
    test 180 PyT_Lb: NTF
    test 181 PyT_Lb: 47.696014°N, 002.337229°E
    test 182 PyT_Lb: NTF
    test 183 PyT_Lb: 47.696014°N, 004.134305°E
    test 184 PyT_Lb: NTF
    test 185 Snyder: 33.0°N, 108.0°W
    test 186 Snyder: NAD27
    test 187 Snyder: 33.0°N, 096.0°W
    test 188 Snyder: NAD27
    test 189 Snyder: 33.0°N, 084.0°W
    test 190 Snyder: NAD27
    test 191 Snyder: 45.0°N, 108.0°W
    test 192 Snyder: NAD27
    test 193 Snyder: 45.0°N, 096.0°W
    test 194 Snyder: NAD27
    test 195 Snyder: 45.0°N, 084.0°W
    test 196 Snyder: NAD27
    test 197 USA_Lb: 33.0°N, 108.0°W
    test 198 USA_Lb: WGS84
    test 199 USA_Lb: 33.0°N, 096.0°W
    test 200 USA_Lb: WGS84
    test 201 USA_Lb: 33.0°N, 084.0°W
    test 202 USA_Lb: WGS84
    test 203 USA_Lb: 45.0°N, 108.0°W
    test 204 USA_Lb: WGS84
    test 205 USA_Lb: 45.0°N, 096.0°W
    test 206 USA_Lb: WGS84
    test 207 USA_Lb: 45.0°N, 084.0°W
    test 208 USA_Lb: WGS84
    test 209 WRF_Lb: 33.0°N, 109.0°W
    test 210 WRF_Lb: WGS84
    test 211 WRF_Lb: 33.0°N, 097.0°W
    test 212 WRF_Lb: WGS84
    test 213 WRF_Lb: 33.0°N, 085.0°W
    test 214 WRF_Lb: WGS84
    test 215 WRF_Lb: 45.0°N, 109.0°W
    test 216 WRF_Lb: WGS84
    test 217 WRF_Lb: 45.0°N, 097.0°W
    test 218 WRF_Lb: WGS84
    test 219 WRF_Lb: 45.0°N, 085.0°W
    test 220 WRF_Lb: WGS84
    test 221 Snyder1: name='Snyder1', lat0=23.0, lon0=-96.0, par1=33.0, par2=45.0, E0=0, N0=0, k0=1, SP=2, datum=(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    test 222 Snyder2: name='Snyder2', lat0=23.0, lon0=-96.0, par1=33.0, par2=45.0, E0=0, N0=0, k0=1, SP=2, datum=(name='NAD27', ellipsoid=Ellipsoids.Clarke1866, transform=Transforms.NAD27)
    all geodesy.lcc tests passed (17.3.20 Python 2.7.13 64bit)

running /Library/Framewo...nts/MacOS/Python tests/testMgrs.py

    testing module geodesy.mgrs version 17.03.07
    test 1 Mgrs1: 31U DQ 48251 11932
    test 2 Mgrs1: [Z:31U, G:DQ, E:48251, N:11932]
    test 3 Mgrs2: 31U DQ 48251 11932
    test 4 Mgrs2: [Z:31U, G:DQ, E:48251, N:11932]
    test 5 Mgrs3: 31U DQ 48251 11932
    test 6 Mgrs3: [Z:31U, G:DQ, E:48251, N:11932]
    test 7 toUtm1: 31 N 448251 5411932
    test 8 toUtm1: [Z:31, H:N, E:448251, N:5411932]
    test 9 toMgrs: 31U DQ 48251 11932
    test 10 toUtm(60.0°N, 001.0°E).toMgrs: 31V CG 88455 53097
    test 11 toUtm(60.0°N, 003.0°E).toMgrs: 32V JM 65640 66593
    test 12 toUtm(60.0°N, 009.0°E).toMgrs: 32V NM 00000 51411
    test 13 toUtm(76.0°N, 001.0°E).toMgrs: 31X DE 45999 36099
    test 14 toUtm(76.0°N, 013.0°E).toMgrs: 33X VE 45999 36099
    test 15 toUtm(76.0°N, 025.0°E).toMgrs: 35X ME 45999 36099
    test 16 toUtm(76.0°N, 037.0°E).toMgrs: 37X DE 45999 36099
    all geodesy.mgrs tests passed (17.3.20 Python 2.7.13 64bit)

running /Library/Framewo...nts/MacOS/Python tests/testNavlabExamples.py

    testing module testNavlabExamples.py version 17.03.08
    test 1 Example 1 delta: [N:331730.863, E:332998.501, D:17398.304]
    test 2 Example 1 delta: [L:470357.384, B:45.109°, E:-2.12°]
    test 3 Example 1 elevation: -2.1198
    test 4 Example 1 bearing: 45.109
    test 5 Example 1 length: 470357.384
    test 6 Example 2 LatLon: 53.301°N, 063.435°E, +400.00m
    test 7 Example 2 toNvector: (0.267, 0.535, 0.802, +400.00)
    test 8 Example 2 delta: [N:3000.0, E:2000.0, D:100.0]
    test 9 Example 2 delta: [L:3606.938, B:33.69°, E:-1.589°]
    test 10 Example 2 destinationNed: 53.327726°N, 063.464965°E, +301.02m  FAILED, KNOWN, expected 53.327726°N, 063.464965°E, +299.138m
    test 11 Example 2 delta: [N:-86126, E:-78900, D:1069]
    test 12 Example 2 delta: [L:116807.681, B:222.493°, E:-0.524°]
    test 13 Example 2 destinationNed: 48.88667°N, 002.37472°E
    test 14 Example 3 toLatLon: 39.379°N, 048.013°W, +4702059.83m
    test 15 Example 4 toCartesian: [6373290.277, 222560.201, 110568.827]
    test 16 Example 5 distanceTo: 332457
    test 17 Example 6 intermediateChordTo: 89.799981°N, 180.0°E
    test 18 Example 6 intermediateTo: 89.8°N, 180.0°E
    test 19 Example 6 intermediateChordTo: 51.372294°N, 000.707192°E
    test 20 Example 6 intermediateTo: 51.372084°N, 000.707337°E
    test 21 Example 7 meanOf: 67.2362°N, 006.9175°W
    test 22 Example 8 destination(sphNv): 79.991549°N, 090.017698°W
    test 23 Example 8 destination(sphTy): 79.991549°N, 090.017698°W
    test 24 Example 8 destination(elVincenty): 79.991584°N, 090.017621°W
    test 25 Example 9 intersection: 40.318643°N, 055.901868°E
    test 26 Example 10 crossTrackDistance: 11118
    1 testNavlabExamples.py test (3.8%) FAILED, incl. 1 KNOWN (17.3.20 Python 2.7.13 64bit)

running /Library/Framewo...nts/MacOS/Python tests/testOsgr.py

    testing module geodesy.osgr version 17.03.07
    test 1 WGS84: 51.4778°N, 000.0016°W
    test 2 OSGB36: 51.477284°N, 000.00002°E
    test 3 WGS84: 51.4778°N, 000.0016°W
    test 4 OSgr1: TG 51409 13177
    test 5 OSgr1: [G:TG, E:51409, N:13177]
    test 6 toLatLon1: 52°39′28.72″N, 001°43′00.63″E  FAILED, KNOWN, expected 52°39′28.72″N, 001°42′57.74″E
    test 7 toLatLon1: 52.657979°N, 001.716843°E  FAILED, KNOWN, expected 52.657977°N, 001.716038°E
    test 8 toOsgr1: 651463,313180  FAILED, KNOWN, expected 651409.903, 313177.270
    test 9 toLatLon2: 52°39′27.25″N, 001°43′07.37″E  FAILED, KNOWN, expected 52°39′27.25″N, 001°43′04.47″E
    test 10 toLatLon2: 52.65757°N, 001.718713°E  FAILED, KNOWN, expected 52.657568°N, 001.717908°E
    test 11 toOsgr2: 651463,313180  FAILED, KNOWN, expected 651409,313177
    test 12 toOsgr3: TG 51409 13177
    test 13 toOsgr4: TG 51409 13177
    test 14 OSGR1: TG 48251 11932
    test 15 OSGR1: [G:TG, E:48251, N:11932]
    test 16 OSGR2: TG 51409 13177
    test 17 OSGR2: [G:TG, E:51409, N:13177]
    test 18 OSGR3: TG 51409 13177
    test 19 OSGR3: [G:TG, E:51409, N:13177]
    test 20 OSGR4: TG 51409 13177
    test 21 OSGR4: [G:TG, E:51409, N:13177]
    test 22 OSGR5: 651409,313177
    test 23 OSGR5: [OSGR:651409.000,313177.000]
    test 24 OSGR6: 651409,313177
    6 geodesy.osgr tests (25.0%) FAILED, incl. 6 KNOWN (17.3.20 Python 2.7.13 64bit)

running /Library/Framewo...nts/MacOS/Python tests/testSpherical.py

    testing module geodesy.sphericalNvector version 17.03.13
    test 1 lat/lonDMS: 52.20472°N, 000.14056°E
    test 2 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 3 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 4 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 5 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 6 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 7 equals: True
    test 8 equals: False
    test 9 bearingTo: 156.1666
    test 10 finalBearingTo: 157.8904
    test 11 bearingTo: 65.8921
    test 12 copy: True
    test 13 distanceTo: 404279.720589
    test 14 distanceTo: 404279.720589
    test 15 distanceTo: 2145
    test 16 midpointTo: 50.536327°N, 001.274614°E
    test 17 destination: 51.513546°N, 000.098345°W
    test 18 destination: 51°30′49″N, 000°05′54″W
    test 19 destination: 34°37′N, 116°33′W
    test 20 destination: 34.613643°N, 116.551171°W
    test 21 crossTrackDistanceTo: -305.67
    test 22 crossTrackDistanceTo: -307.55
    test 23 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 24 greatCircleTo: (-0.79408, 0.12859, 0.59406)
    test 25 intermediateTo: 51.372084°N, 000.707337°E
    test 26 intermediateChordTo: 51.372294°N, 000.707192°E
    test 27 intersection: 50.907608°N, 004.508575°E
    test 28 intersection: 50°54′27.39″N, 004°30′30.87″E
    test 29 intersection: 43.5719°N, 116.188757°W
    test 30 intersection: 43°34′18.84″N, 116°11′19.53″W
    test 31 maxLat0: 90.0
    test 32 maxLat1: 89.0
    test 33 maxLat90: 0.0
    test 34 rhumbBearingTo: 116.722
    test 35 rhumbDistanceTo: 40307.8
    test 36 rhumbMidpointo: 51.0455°N, 001.595727°E
    test 37 crossTrackDistanceTo: -305.67
    test 38 crossTrackDistanceTo: -307.55
    test 39 toLatLon: 44.995674°N, 045.0°E
    test 40 toNvector: (0.50004, 0.50004, 0.70705)
    test 41 equals: False
    test 42 equals: True
    test 43 sumOf: (52.70504, 0.61904, 0.70705)
    test 44 sumOf: Nv
    test 45 copy: True
    test 46 isclockwise: False
    test 47 isclockwise: True
    test 48 isclockwise: too few points: 2
    test 49 nearestOn: 51.0004°N, 001.9°E
    test 50 distanceTo: 42.712
    test 51 nearestOn: 51.0°N, 002.0°E
    test 52 nearestOn: 00.0°N, 000.0°E
    test 53 nearestOn: 00.0°N, 020.0°E
    test 54 BasseC: 47.3038°N, 002.5721°W
    test 55 BasseH: 47.311067°N, 002.528617°W
    test 56 triangulate: 47.323667°N, 002.568501°W
    all geodesy.sphericalNvector tests passed (17.3.20 Python 2.7.13 64bit)

    testing module geodesy.sphericalTrigonometry version 17.03.13
    test 1 lat/lonDMS: 52.20472°N, 000.14056°E
    test 2 lat/lonDMS F_DM: 52°12.283′N, 000°08.434′E
    test 3 lat/lonDMS F_DM: 52°12.2832′N, 000°08.4336′E
    test 4 lat/lonDMS F_DMS: 52°12′17″N, 000°08′26″E
    test 5 lat/lonDMS F_DMS: 52°12′17.0″N, 000°08′26.0″E
    test 6 lat/lonDMS F_RAD: 0.911144N, 0.002453E
    test 7 equals: True
    test 8 equals: False
    test 9 bearingTo: 156.1666
    test 10 finalBearingTo: 157.8904
    test 11 bearingTo: 65.8921
    test 12 copy: True
    test 13 distanceTo: 404279.720589
    test 14 distanceTo: 404279.720589
    test 15 distanceTo: 2145
    test 16 midpointTo: 50.536327°N, 001.274614°E
    test 17 destination: 51.513546°N, 000.098345°W
    test 18 destination: 51°30′49″N, 000°05′54″W
    test 19 destination: 34°37′N, 116°33′W
    test 20 destination: 34.613643°N, 116.551171°W
    test 21 crossTrackDistanceTo: type(end) mismatch: int vs sphericalTrigonometry.LatLon
    test 22 crossTrackDistanceTo: -307.55
    test 23 greatCircle: (-0.79408, 0.12856, 0.59406)
    test 24 intermediateTo: 51.372084°N, 000.707337°E
    test 25 intersection: 50.907608°N, 004.508575°E
    test 26 intersection: 50°54′27.39″N, 004°30′30.87″E
    test 27 intersection: 43.5719°N, 116.188757°W
    test 28 intersection: 43°34′18.84″N, 116°11′19.53″W
    test 29 maxLat0: 90.0
    test 30 maxLat1: 89.0
    test 31 maxLat90: 0.0
    test 32 crossingParallels: 009°35′38.65″E, 170°24′21.35″E
    test 33 rhumbBearingTo: 116.722
    test 34 rhumbDistanceTo: 40307.8
    test 35 rhumbMidpointo: 51.0455°N, 001.595727°E
    all geodesy.sphericalTrigonometry tests passed (17.3.20 Python 2.7.13 64bit)

running /Library/Framewo...nts/MacOS/Python tests/testUtm.py

    testing module geodesy.utm version 17.03.07
    test 1 Utm1: 03 N 448251.0 5411932.0001
    test 2 Utm2: 31 N 448252 5411933
    test 3 Utm2: 31 N 448251.795 5411932.678
    test 4 Utm2: 31 N 448251.8 5411932.7 n/a n/a
    test 5 Utm.toLatLon1: 48.8582°N, 002.2945°E
    test 6 Utm.toLatLon1: 48°51′29.52″N, 002°17′40.2″E
    test 7 toUtm1: 31 N 448252 5411933
    test 8 toUtm1: 31 N 448251.795 5411932.678
    test 9 toUtm2: [Z:31, H:N, E:448252, N:5411933, C:-000.53131221°, S:0.9996329]
    test 10 toUtm4: 48 N 377302 1483035
    test 11 toUtm5: 48P N 377302.354183 1483034.777084 -000.26291348° 0.99978623
    test 12 toUtm6: 13 S 622698 8516965
    test 13 toUtm7: 13L S 622697.645817 8516965.222916 -000.26291348° 0.99978623
    test 14 toMgrs1: 13L FF 22697 16965
    test 15 toMgrs2: 31U DQ 48251 11932
    test 16 toUtm(61.44°N, 025.4°E): 35V N 414668 6812845
    test 17 toUtm(47.04°S, 073.48°W): 18G S 615472 4789270
    test 18 toUtm(40.4°N, 074.7°W): 18T N 525458 4472198
    test 19 toUtm(44.5°N, 088.5°W): 16T N 380753 4928503
    test 20 toUtm(50.8694°N, 115.6508°W): 11U N 594937 5636169
    test 21 toUtm(00.0°N, 000.0°E): 31N N 166021 0
    test 22 toUtm(00.13°N, 000.2324°W): 30N N 808084 14386
    test 23 toUtm(45.6456°S, 023.3545°E): 34G S 683474 4942631
    test 24 toUtm(12.765°S, 033.8765°W): 25L S 404859 8588691
    test 25 toUtm(80.5434°S, 170.654°W): lat outside UTM: -80.5434
    test 26 toUtm(90.0°N, 177.0°E): lat outside UTM: 90.0
    test 27 toUtm(90.0°S, 177.0°W): lat outside UTM: -90.0
    test 28 toUtm(90.0°N, 003.0°E): lat outside UTM: 90.0
    test 29 toUtm(23.4578°N, 135.4545°W): 08Q N 453580 2594273
    test 30 toUtm(77.345°N, 156.9876°E): 57X N 450794 8586116
    test 31 toUtm(89.3454°S, 048.9306°W): lat outside UTM: -89.3454
    test 32 toUtm(60.0°N, 001.0°E): 31V N 388456 6653097
    test 33 toUtm(60.0°N, 003.0°E): 32V N 165640 6666594
    test 34 toUtm(60.0°N, 006.0°E): 32V N 332705 6655205
    test 35 toUtm(60.0°N, 009.0°E): 32V N 500000 6651411
    test 36 toUtm(60.0°N, 012.0°E): 33V N 332705 6655205
    test 37 toUtm(76.0°N, 001.0°E): 31X N 446000 8436100
    test 38 toUtm(76.0°N, 007.0°E): 31X N 607943 8438843
    test 39 toUtm(76.0°N, 013.0°E): 33X N 446000 8436100
    test 40 toUtm(76.0°N, 019.0°E): 33X N 607943 8438843
    test 41 toUtm(76.0°N, 025.0°E): 35X N 446000 8436100
    test 42 toUtm(76.0°N, 031.0°E): 35X N 607943 8438843
    test 43 toUtm(76.0°N, 037.0°E): 37X N 446000 8436100
    all geodesy.utm tests passed (17.3.20 Python 2.7.13 64bit)

running /Library/Framewo...nts/MacOS/Python tests/tests.py

    testing module tests.py version 17.03.20

    testing module __init__.pyc version 17.03.20
    test 1 geodesy.Conic() class (geodesy.lcc): True
    test 2 geodesy.Conics attribute (geodesy.datum): True
    test 3 geodesy.Datum() class (geodesy.datum): True
    test 4 geodesy.Datums attribute (geodesy.datum): True
    test 5 geodesy.EPS float: True
    test 6 geodesy.EPS1 float: True
    test 7 geodesy.EPS2 float: True
    test 8 geodesy.Ellipsoid() class (geodesy.datum): True
    test 9 geodesy.Ellipsoids attribute (geodesy.datum): True
    test 10 geodesy.F_D str: True
    test 11 geodesy.F_DM str: True
    test 12 geodesy.F_DMS str: True
    test 13 geodesy.F_RAD str: True
    test 14 geodesy.Lcc() class (geodesy.lcc): True
    test 15 geodesy.Mgrs() class (geodesy.mgrs): True
    test 16 geodesy.Osgr() class (geodesy.osgr): True
    test 17 geodesy.PI float: True
    test 18 geodesy.PI2 float: True
    test 19 geodesy.PI_2 float: True
    test 20 geodesy.R_KM float: True
    test 21 geodesy.R_M float: True
    test 22 geodesy.R_NM float: True
    test 23 geodesy.R_SM float: True
    test 24 geodesy.S_DEG str: True
    test 25 geodesy.S_MIN str: True
    test 26 geodesy.S_SEC str: True
    test 27 geodesy.S_SEP str: True
    test 28 geodesy.Transform() class (geodesy.datum): True
    test 29 geodesy.Transforms attribute (geodesy.datum): True
    test 30 geodesy.Utm() class (geodesy.utm): True
    test 31 geodesy.VincentyError() class (geodesy.ellipsoidalVincenty): True
    test 32 geodesy.bearingDMS() function (geodesy.dms): True
    test 33 geodesy.cbrt() function (geodesy.utils): True
    test 34 geodesy.compassDMS() function (geodesy.dms): True
    test 35 geodesy.compassPoint() function (geodesy.dms): True
    test 36 geodesy.degrees attribute (math): True
    test 37 geodesy.degrees180() function (geodesy.utils): True
    test 38 geodesy.degrees360() function (geodesy.utils): True
    test 39 geodesy.degrees90() function (geodesy.utils): True
    test 40 geodesy.ellipsoidalNvector module: True
    test 41 geodesy.ellipsoidalVincenty module: True
    test 42 geodesy.fStr() function (geodesy.utils): True
    test 43 geodesy.false2f() function (geodesy.utils): True
    test 44 geodesy.favg() function (geodesy.utils): True
    test 45 geodesy.fdot() function (geodesy.utils): True
    test 46 geodesy.fdot3() function (geodesy.utils): True
    test 47 geodesy.fsum attribute (math): True
    test 48 geodesy.halfs() function (geodesy.utils): True
    test 49 geodesy.hsin() function (geodesy.utils): True
    test 50 geodesy.hypot1() function (geodesy.utils): True
    test 51 geodesy.hypot3() function (geodesy.utils): True
    test 52 geodesy.isint() function (geodesy.utils): True
    test 53 geodesy.isscalar() function (geodesy.utils): True
    test 54 geodesy.latDMS() function (geodesy.dms): True
    test 55 geodesy.len2() function (geodesy.utils): True
    test 56 geodesy.lonDMS() function (geodesy.dms): True
    test 57 geodesy.map1() function (geodesy.utils): True
    test 58 geodesy.map2() function (geodesy.utils): True
    test 59 geodesy.normDMS() function (geodesy.dms): True
    test 60 geodesy.nvector module: True
    test 61 geodesy.parse3llh() function (geodesy.dms): True
    test 62 geodesy.parseDMS() function (geodesy.dms): True
    test 63 geodesy.parseMGRS() function (geodesy.mgrs): True
    test 64 geodesy.parseOSGR() function (geodesy.osgr): True
    test 65 geodesy.parseUTM() function (geodesy.utm): True
    test 66 geodesy.precision() function (geodesy.dms): True
    test 67 geodesy.radians attribute (math): True
    test 68 geodesy.radiansPI() function (geodesy.utils): True
    test 69 geodesy.radiansPI2() function (geodesy.utils): True
    test 70 geodesy.radiansPI_2() function (geodesy.utils): True
    test 71 geodesy.sphericalNvector module: True
    test 72 geodesy.sphericalTrigonometry module: True
    test 73 geodesy.tanPI_2_2() function (geodesy.utils): True
    test 74 geodesy.toDMS() function (geodesy.dms): True
    test 75 geodesy.toLcc() function (geodesy.lcc): True
    test 76 geodesy.toMgrs() function (geodesy.mgrs): True
    test 77 geodesy.toOsgr() function (geodesy.osgr): True
    test 78 geodesy.toUtm() function (geodesy.utm): True
    test 79 geodesy.vector3d module: True
    test 80 geodesy.version str: True
    test 81 geodesy.wrap180() function (geodesy.utils): True
    test 82 geodesy.wrap360() function (geodesy.utils): True
    test 83 geodesy.wrap90() function (geodesy.utils): True
    test 84 geodesy.wrapPI() function (geodesy.utils): True
    test 85 geodesy.wrapPI2() function (geodesy.utils): True
    test 86 geodesy.wrapPI_2() function (geodesy.utils): True

    testing module datum.pyc version 17.03.10
    test 87 datum.Datum() class: True
    test 88 datum.Datums attribute: True
    test 89 datum.Ellipsoid() class: True
    test 90 datum.Ellipsoids attribute: True
    test 91 datum.R_KM float: True
    test 92 datum.R_M float: True
    test 93 datum.R_NM float: True
    test 94 datum.R_SM float: True
    test 95 datum.Transform() class: True
    test 96 datum.Transforms attribute: True

    testing module dms.pyc version 17.03.20
    test 97 dms.F_D str: True
    test 98 dms.F_DM str: True
    test 99 dms.F_DMS str: True
    test 100 dms.F_RAD str: True
    test 101 dms.S_DEG str: True
    test 102 dms.S_MIN str: True
    test 103 dms.S_SEC str: True
    test 104 dms.S_SEP str: True
    test 105 dms.bearingDMS() function: True
    test 106 dms.compassDMS() function: True
    test 107 dms.compassPoint() function: True
    test 108 dms.latDMS() function: True
    test 109 dms.lonDMS() function: True
    test 110 dms.normDMS() function: True
    test 111 dms.parse3llh() function: True
    test 112 dms.parseDMS() function: True
    test 113 dms.precision() function: True
    test 114 dms.toDMS() function: True

    testing module lcc.pyc version 17.03.10
    test 115 lcc.Conic() class: True
    test 116 lcc.Conics attribute (geodesy.datum): True
    test 117 lcc.Lcc() class: True
    test 118 lcc.toLcc() function: True

    testing module mgrs.pyc version 17.03.07
    test 119 mgrs.Mgrs() class: True
    test 120 mgrs.parseMGRS() function: True
    test 121 mgrs.toMgrs() function: True

    testing module osgr.pyc version 17.03.07
    test 122 osgr.Osgr() class: True
    test 123 osgr.parseOSGR() function: True
    test 124 osgr.toOsgr() function: True

    testing module ellipsoidalNvector.pyc version 17.03.11
    test 125 ellipsoidalNvector.Cartesian() class: True
    test 126 ellipsoidalNvector.LatLon() class: True
    test 127 ellipsoidalNvector.Ned() class: True
    test 128 ellipsoidalNvector.Nvector() class: True
    test 129 ellipsoidalNvector.meanOf() function: True
    test 130 ellipsoidalNvector.toNed() function: True

    testing module ellipsoidalVincenty.pyc version 17.03.20
    test 131 ellipsoidalVincenty.Cartesian() class: True
    test 132 ellipsoidalVincenty.LatLon() class: True
    test 133 ellipsoidalVincenty.VincentyError() class: True

    testing module sphericalNvector.pyc version 17.03.13
    test 134 sphericalNvector.LatLon() class: True
    test 135 sphericalNvector.Nvector() class: True
    test 136 sphericalNvector.areaOf() function: True
    test 137 sphericalNvector.intersection() function: True
    test 138 sphericalNvector.isclockwise() function: True
    test 139 sphericalNvector.meanOf() function: True
    test 140 sphericalNvector.triangulate() function: True
    test 141 sphericalNvector.trilaterate() function: True

    testing module sphericalTrigonometry.pyc version 17.03.13
    test 142 sphericalTrigonometry.LatLon() class: True
    test 143 sphericalTrigonometry.intersection() function: True
    test 144 sphericalTrigonometry.meanOf() function: True

    testing module nvector.pyc version 17.02.14
    test 145 nvector.NorthPole attribute: True
    test 146 nvector.Nvector() class: True
    test 147 nvector.SouthPole attribute: True
    test 148 nvector.sumOf() function: True

    testing module vector3d.pyc version 17.02.14
    test 149 vector3d.Vector3d() class: True
    test 150 vector3d.sumOf() function: True

    testing module utm.pyc version 17.03.07
    test 151 utm.Utm() class: True
    test 152 utm.parseUTM() function: True
    test 153 utm.toUtm() function: True

    testing module utils.pyc version 17.03.20
    test 154 utils.EPS float: True
    test 155 utils.EPS1 float: True
    test 156 utils.EPS2 float: True
    test 157 utils.PI float: True
    test 158 utils.PI2 float: True
    test 159 utils.PI_2 float: True
    test 160 utils.cbrt() function: True
    test 161 utils.degrees attribute (math): True
    test 162 utils.degrees180() function: True
    test 163 utils.degrees360() function: True
    test 164 utils.degrees90() function: True
    test 165 utils.fStr() function: True
    test 166 utils.false2f() function: True
    test 167 utils.favg() function: True
    test 168 utils.fdot() function: True
    test 169 utils.fdot3() function: True
    test 170 utils.fsum attribute (math): True
    test 171 utils.halfs() function: True
    test 172 utils.hsin() function: True
    test 173 utils.hypot1() function: True
    test 174 utils.hypot3() function: True
    test 175 utils.isint() function: True
    test 176 utils.isscalar() function: True
    test 177 utils.len2() function: True
    test 178 utils.map1() function: True
    test 179 utils.map2() function: True
    test 180 utils.radians attribute (math): True
    test 181 utils.radiansPI() function: True
    test 182 utils.radiansPI2() function: True
    test 183 utils.radiansPI_2() function: True
    test 184 utils.tanPI_2_2() function: True
    test 185 utils.wrap180() function: True
    test 186 utils.wrap360() function: True
    test 187 utils.wrap90() function: True
    test 188 utils.wrapPI() function: True
    test 189 utils.wrapPI2() function: True
    test 190 utils.wrapPI_2() function: True

    testing module LatLon.attrs version 17.03.20
    test 191 _Nv attribute: geodesy.ellipsoidalNvector, geodesy.sphericalNvector
    test 192 _ab attribute: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 193 _alter() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 194 _datum attribute: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 195 _direct() method: geodesy.ellipsoidalVincenty
    test 196 _epsilon float: geodesy.ellipsoidalVincenty
    test 197 _gc3() method: geodesy.sphericalNvector
    test 198 _height int: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 199 _inverse() method: geodesy.ellipsoidalVincenty
    test 200 _iterations int: geodesy.ellipsoidalVincenty
    test 201 _lat int: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 202 _lon int: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 203 _osgr attribute: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty
    test 204 _r3 attribute: geodesy.ellipsoidalNvector
    test 205 _rhumb3() method: geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 206 _rotation3() method: geodesy.ellipsoidalNvector
    test 207 _update() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 208 _utm attribute: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty
    test 209 _v3d attribute: geodesy.sphericalTrigonometry
    test 210 bearingTo() method: geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 211 classname() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 212 convertDatum() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty
    test 213 copy() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 214 crossTrackDistanceTo() method: geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 215 crossingParallels() method: geodesy.sphericalTrigonometry
    test 216 datum property: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 217 deltaTo() method: geodesy.ellipsoidalNvector
    test 218 destination() method: geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 219 destination2() method: geodesy.ellipsoidalVincenty
    test 220 destinationNed() method: geodesy.ellipsoidalNvector
    test 221 distanceTo() method: geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 222 distanceTo3() method: geodesy.ellipsoidalVincenty
    test 223 ellipsoid() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty
    test 224 ellipsoids() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty
    test 225 epsilon property: geodesy.ellipsoidalVincenty
    test 226 equals() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 227 finalBearingOn() method: geodesy.ellipsoidalVincenty
    test 228 finalBearingTo() method: geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 229 greatCircle() method: geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 230 greatCircleTo() method: geodesy.sphericalNvector
    test 231 height property: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 232 initialBearingTo() method: geodesy.ellipsoidalVincenty
    test 233 intermediateChordTo() method: geodesy.sphericalNvector
    test 234 intermediateTo() method: geodesy.ellipsoidalNvector, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 235 intersection() method: geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 236 isEnclosedBy() method: geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 237 isWithin() method: geodesy.sphericalNvector
    test 238 isclockwise() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 239 iterations property: geodesy.ellipsoidalVincenty
    test 240 lat property: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 241 lon property: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 242 maxLat() method: geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 243 midpointTo() method: geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 244 minLat() method: geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 245 nearestOn() method: geodesy.sphericalNvector
    test 246 others() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 247 parse() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 248 points() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 249 rhumbBearingTo() method: geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 250 rhumbDistanceTo() method: geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 251 rhumbMidpointTo() method: geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 252 to2ab() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 253 to3llh() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 254 to3xyz() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 255 to4xyzh() method: geodesy.ellipsoidalNvector, geodesy.sphericalNvector
    test 256 toCartesian() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty
    test 257 toDatum() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty
    test 258 toNvector() method: geodesy.ellipsoidalNvector, geodesy.sphericalNvector
    test 259 toOsgr() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty
    test 260 toStr() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 261 toStr2() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 262 toUtm() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty
    test 263 toVector3d() method: geodesy.sphericalTrigonometry
    test 264 topsub() method: geodesy.ellipsoidalNvector, geodesy.ellipsoidalVincenty, geodesy.sphericalNvector, geodesy.sphericalTrigonometry
    test 265 triangulate() method: geodesy.sphericalNvector
    test 266 trilaterate() method: geodesy.sphericalNvector

    testing module LatLon.mro version 17.03.20
    test 267 geodesy.ellipsoidalNvector: geodesy.ellipsoidalNvector.LatLon, geodesy.nvector.LatLonNvectorBase, geodesy.ellipsoidalBase.LatLonEllipsoidalBase, geodesy.bases.LatLonHeightBase, geodesy.bases.Base
    test 268 geodesy.ellipsoidalVincenty: geodesy.ellipsoidalVincenty.LatLon, geodesy.ellipsoidalBase.LatLonEllipsoidalBase, geodesy.bases.LatLonHeightBase, geodesy.bases.Base
    test 269 geodesy.sphericalNvector: geodesy.sphericalNvector.LatLon, geodesy.nvector.LatLonNvectorBase, geodesy.sphericalBase.LatLonSphericalBase, geodesy.bases.LatLonHeightBase, geodesy.bases.Base
    test 270 geodesy.sphericalTrigonometry: geodesy.sphericalTrigonometry.LatLon, geodesy.sphericalBase.LatLonSphericalBase, geodesy.bases.LatLonHeightBase, geodesy.bases.Base

    all tests.py tests passed (17.3.20 Python 2.7.13 64bit)

tests/run.py /Library/Framewo...nts/MacOS/Python all OK (17.3.20 Python 2.7.13 64bit macOS 10.12.3)
